Tutorial para liberar proxy no linux 

1) sudo su

2) nano /etc/apt/apt.conf.d/proxy.conf 

3) Acquire {   
 HTTP::proxy"http://00666263159:Clebr2933%40@proxybrasilia.intraer:8080";  
 HTTPS::proxy"http://00666263159:Clebr2933%40@proxybrasilia.intraer:8080"; 
}

4) cp /etc/apt/sources.list /etc/apt/sources.list.configuracao_Padrao


5) sudo sed -i -re 's/([a-z]{2}.)?archive.ubuntu.com|security.ubuntu.com/old-releases.ubuntu.com/g' /etc/apt/sources.list

6) nano /etc/apt/sources.list

7) # See sources.list(5) manpage for more information
# Remember that CD-ROMs, DVDs and such are managed through the apt-cdrom tool.
deb http://old-releases.ubuntu.com/ubuntu hirsute universe main restricted multiverse
deb-src http://old-releases.ubuntu.com/ubuntu hirsute universe main restricted multiverse

deb http://old-releases.ubuntu.com/ubuntu hirsute-security universe main restricted multiverse
deb-src http://old-releases.ubuntu.com/ubuntu hirsute-security universe main restricted multiverse

deb http://old-releases.ubuntu.com/ubuntu hirsute-updates universe main restricted multiverse
deb-src http://old-releases.ubuntu.com/ubuntu hirsute-updates universe main restricted multiverse

8) sudo apt-get update && sudo apt-get dist-upgrade

9) - Adicionar proxy dentro do DOCKER no LINUX (SE NECESSÁRIO rodar app de dentro do linux)
cat ~/.docker/config.json
vim ~/.docker/config.json PARA EDITAR -> i, :w :q

"proxies":
 {
   "default":
   {
     "httpProxy": "http://[USUARIO]:[SENHA]@10.52.132.215:8080",
     "httpsProxy": "http://[USUARIO]:[SENHA]@10.52.132.215:8080",
     "noProxy": "127.0.0.0/8,*.intraer"
   }
 }























https://github.com/codeedu/wsl2-docker-quickstart#instalar-o-docker-com-docker-engine-docker-nativo

https://learn.microsoft.com/en-us/windows/wsl/install




https://www.youtube.com/watch?v=IL7Jd9rjgrM



Acquire {   
 HTTP::proxy"http://00666263159:Clebr2933%40@proxybrasilia.intraer:8080";  
 HTTPS::proxy"http://00666263159:Clebr2933%40@proxybrasilia.intraer:8080"; 
}

nano /etc/apt/sources.list



C:\Users\00666263159\Documents\CLEILTON__CCA-BR\SIGPES-NG\certificado


cd /mnt/c/User/00666263159/Documents/CLEILTON__CCA-BR/SIGPES-NG/certificado



sudo scp /mnt/c/SUA-PASTA-ONDE-ESTA-O-CERTIFICADO/registry.ccarj.intraer.crt /etc/ssl/certs/ccarj.crt

sudo scp /mnt/c/SUA-PASTA-ONDE-ESTA-O-CERTIFICADO/registry.ccarj.intraer.crt /usr/local/share/ca-certificates

sudo update-ca-certificates








GNU nano 6.2                                                                                         wsl.conf                                                                                                  # Automatically mount Windows drive when the distribution is launched
[automount]

# Set to true will automount fixed drives (C:/ or D:/) with DrvFs under the root directory set above. Set to false means drives won't be mounted automatically, but need to be mounted manually or with fstab.
enabled = true

# Sets the directory where fixed drives will be automatically mounted. This example changes the mount location, so your C-drive would be /c, rather than the default /mnt/c.
root = /

# DrvFs-specific options can be specified.
options = "metadata,uid=1003,gid=1003,umask=077,fmask=11,case=off"

# Sets the /etc/fstab file to be processed when a WSL distribution is launched.
mountFsTab = true

# Network host settings that enable the DNS server used by WSL 2. This example changes the hostname, sets generateHosts to false, preventing WSL from the default behavior of auto-generating /etc/hosts, and se>[network]
hostname = DemoHost
generateHosts = false
generateResolvConf = false

# Set whether WSL supports interop process like launching Windows apps and adding path variables. Setting these to false will block the launch of Windows processes and block adding $PATH environment variables.[interop]
enabled = false
appendWindowsPath = false

# Set the user when launching a distribution with WSL.
[user]
default = DemoUser

# Set a command to run when a new WSL instance launches. This example starts the Docker container service.
[boot]
command = service docker start
[boot]
systemd=true

















# See http://help.ubuntu.com/community/UpgradeNotes for how to upgrade to
# newer versions of the distribution.
deb http://old-releases.ubuntu.com/ubuntu/ jammy main restricted
# deb-src http://old-releases.ubuntu.com/ubuntu/ jammy main restricted

## Major bug fix updates produced after the final release of the
## distribution.
deb http://old-releases.ubuntu.com/ubuntu/ jammy-updates main restricted
# deb-src http://old-releases.ubuntu.com/ubuntu/ jammy-updates main restricted

## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu
## team. Also, please note that software in universe WILL NOT receive any
## review or updates from the Ubuntu security team.
deb http://old-releases.ubuntu.com/ubuntu/ jammy universe
# deb-src http://old-releases.ubuntu.com/ubuntu/ jammy universe
deb http://old-releases.ubuntu.com/ubuntu/ jammy-updates universe
# deb-src http://old-releases.ubuntu.com/ubuntu/ jammy-updates universe

## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu
## team, and may not be under a free licence. Please satisfy yourself as to
## your rights to use the software. Also, please note that software in
## multiverse WILL NOT receive any review or updates from the Ubuntu
## security team.
deb http://old-releases.ubuntu.com/ubuntu/ jammy multiverse
# deb-src http://old-releases.ubuntu.com/ubuntu/ jammy multiverse
deb http://old-releases.ubuntu.com/ubuntu/ jammy-updates multiverse
# deb-src http://old-releases.ubuntu.com/ubuntu/ jammy-updates multiverse

## N.B. software from this repository may not have been tested as
## extensively as that contained in the main release, although it includes
## newer versions of some applications which may provide useful features.
## Also, please note that software in backports WILL NOT receive any review
## or updates from the Ubuntu security team.
deb http://old-releases.ubuntu.com/ubuntu/ jammy-backports main restricted universe multiverse
# deb-src http://old-releases.ubuntu.com/ubuntu/ jammy-backports main restricted universe multiverse

deb http://old-releases.ubuntu.com/ubuntu/ jammy-security main restricted
# deb-src http://old-releases.ubuntu.com/ubuntu/ jammy-security main restricted
deb http://old-releases.ubuntu.com/ubuntu/ jammy-security universe
# deb-src http://old-releases.ubuntu.com/ubuntu/ jammy-security universe
deb http://old-releases.ubuntu.com/ubuntu/ jammy-security multiverse
# deb-src http://old-releases.ubuntu.com/ubuntu/ jammy-security multiverse























### Tutorial oficial: 
https://docs.microsoft.com/en-us/windows/wsl/install-win10

### Passo 1 (PowerShell Admin): 
dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart

### Passo 2 (PowerShell Admin):
dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart

### Passo 3
REINICIE O COMPUTADOR

### Passo 4 (Download the Linux kernel update package):
https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi

### Passo 5 (PowerShell Admin):
wsl --set-default-version 2

### Passo 7 (Instale o docker):
Tutorial: https://docs.docker.com/docker-for-windows/install/